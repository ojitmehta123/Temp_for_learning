
#!/usr/bin/env python

"""
RRT with pre-fed lists of polygons and circles.
"""

import matplotlib.pyplot as plt
import random
import math
import copy

from shapely.geometry import Polygon
from shapely.geometry import Point
from descartes import PolygonPatch


show_animation = True


class RRT():
    """
    Class for RRT Planning
    """

    def __init__(self, start, goal, obstacleList, obstacleList2,
                 randArea, expandDis=0.4, goalSampleRate=1, maxIter=500,mnl=0.1):
        """
        Setting Parameter
        start:Start Position [x,y]
        goal:Goal Position [x,y]
        obstacleList:obstacle Positions [[x,y,size],...]
        randArea:Ramdom Samping Area [min,max]
        """
        self.start = Node(start[0], start[1])
        self.end = Node(goal[0], goal[1])
        self.minrand = randArea[0]
        self.maxrand = randArea[1]
        self.expandDis = expandDis
        self.goalSampleRate = goalSampleRate
        self.maxIter = maxIter
        self.obstacleList = obstacleList
        self.obstacleList2 = obstacleList2
        self.mnl=mnl

    def st_linecheck(self,newNode,d):
        st_count=0
        st_nodelist=self.nodeList[:]
        st_theta=math.atan2(self.end.y-newNode.y,self.end.x-newNode.x)
        st_distance=d
        iterations=int(st_distance/self.mnl)
        st_start=len(st_nodelist)
        st_cos=math.cos(st_theta)
        st_sin=math.sin(st_theta)
        for i in range(1,iterations):
            st_x = newNode.x + (self.mnl)*i*st_cos
            st_y = newNode.y + (self.mnl)*i*st_sin

            st_newnode=Node(st_x,st_y)
            if not self.CollisionCheck(st_newnode, self.obstacleList, self.obstacleList2):
                st_count=-1
                break
        st_count+=1
        return st_count



    def Planning(self, animation=True):
        """
        Pathplanning
        animation: flag for animation on or off
        """

        self.nodeList = [self.start]
        while True:
            # Random Sampling
            if random.randint(0, 100) > self.goalSampleRate:
                rnd = [random.uniform(self.minrand, self.maxrand), random.uniform(
                    self.minrand, self.maxrand)]
            else:
                rnd = [self.end.x, self.end.y]

            # Find nearest node
            nind = self.GetNearestListIndex(self.nodeList, rnd)
            # print(nind)

            # expand tree
            nearestNode = self.nodeList[nind]
            theta = math.atan2(rnd[1] - nearestNode.y, rnd[0] - nearestNode.x)    # returns angle made with x-axis by a vector by from origin to (x,y)

            newNode = copy.deepcopy(nearestNode)
            newNode.x += self.expandDis * math.cos(theta)
            newNode.y += self.expandDis * math.sin(theta)
            newNode.parent = nind

            if not self.CollisionCheck(node=newNode,obstacleList= self.obstacleList,obstacleList2= self.obstacleList2):
                continue

            self.nodeList.append(newNode)
            print("nNodelist:", len(self.nodeList))

            # check goal
            dx = newNode.x - self.end.x
            dy = newNode.y - self.end.y
            d = math.sqrt(dx * dx + dy * dy)
            if d <= self.expandDis:
                print("Goal!!")
                break


            if animation:
                self.DrawGraph(rnd)


#straight line check
            if d > self.expandDis:
                st_count=self.st_linecheck(newNode,d)
                if st_count!=0:
            	       break

        path = [[self.end.x, self.end.y]]
        lastIndex = len(self.nodeList) - 1
        while self.nodeList[lastIndex].parent is not None:
            node = self.nodeList[lastIndex]
            path.append([node.x, node.y])
            lastIndex = node.parent
        path.append([self.start.x, self.start.y])

        return path

    def DrawGraph(self, rnd=None):
        """
        Draw Graph
        """
        plt.clf()
        if rnd is not None:
            plt.plot(rnd[0], rnd[1], "^k")
        for node in self.nodeList:
            if node.parent is not None:
                plt.plot([node.x, self.nodeList[node.parent].x], [
                         node.y, self.nodeList[node.parent].y], "-g")

        for (ox, oy, size) in self.obstacleList:
            ax=plt.gca()
            ax.add_artist(plt.Circle((ox,oy), size,color="b"))
        for i in self.obstacleList2:
            poly=Polygon(i)
            fig = plt.figure(1, figsize=(5,5), dpi=90)
            ax = fig.add_subplot(111)
            poly_patch = PolygonPatch(poly)
            ax.add_patch(poly_patch)
        plt.plot(self.start.x, self.start.y, "xr")
        plt.plot(self.end.x, self.end.y, "xr")
        plt.axis([-5, 15, -5, 15])
        plt.grid(True)
        plt.pause(0.00001)

    def GetNearestListIndex(self, nodeList, rnd):
        dlist = [(node.x - rnd[0]) ** 2 + (node.y - rnd[1])
                 ** 2 for node in nodeList]
        minind = dlist.index(min(dlist))
        return minind
    
    @staticmethod
    def CollisionCheck(node, obstacleList, obstacleList2):

        for (ox, oy, size) in obstacleList:
            dx = ox - node.x
            dy = oy - node.y
            d = math.sqrt(dx * dx + dy * dy)
            if d <= size:
                return False  # collision
        for i in list(obstacleList2):
            poly=Polygon(list(i))
            nodepoint = Point(node.x, node.y)
            if nodepoint.within(poly):
                return False

        return True  # safe


class Node():
    """
    RRT Node
    """

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.parent = None

    def __str__(self):
        return ("["+str(self.x)+','+str(self.y)+"]")

def final_path(f_path_i,ol1,ol2):
    f_path_o=[]
    f_path_o.append(f_path_i[0])
    f_path_i_len=len(f_path_i)
    min_in=0.005
    temp=0
    current_index=0
    while current_index < (len(f_path_i)):
        if current_index==f_path_i_len-1 :
            break
        cu_y=f_path_i[current_index][1]
        cu_x=f_path_i[current_index][0]
        for check_index in range(current_index+1,f_path_i_len):
            ch_x=f_path_i[check_index][0]
            ch_y=f_path_i[check_index][1]
            alpha=math.atan2(ch_y-cu_y,ch_x-cu_x)
            sin=math.sin(alpha)
            cos=math.cos(alpha)
            f_dist=math.sqrt((ch_y-cu_y)**2+(ch_x-cu_x)**2)
            f_iter=int(f_dist/min_in)
            col_check=0
            for k in range(1,f_iter+1):
                f_x=cu_x+min_in*k*cos
                f_y=cu_y+min_in*k*sin
                f_node=Node(f_x,f_y)
                if not RRT.CollisionCheck(f_node,ol1,ol2):
                    col_check+=1
                    break
            if col_check==0:
                temp=check_index
        f_path_o.append(f_path_i[temp])
        current_index=temp
        temp=temp+1
    return f_path_o


def main():
    print("start simple RRT path planning")

    # ====Search Path with RRT====
    obstacleList = [
        (5, 5, 1),
        (3, 6, 2),
        (2,8,3),
        (12.25,7.5,2),
        # (8,2,2),
        (0,4,1),
        # (7,2,0.5),
        (6,3,2),
        (8,6,1),
         (6,8,2)
    ]  # [x,y,size]
    obstacleList2=[]
#    obstacleList2 =[((1.5509529113769531, -0.08150888234376907), (1.552141785621643, -0.05435313284397125), (1.5530931949615479, 0.0), (1.5347545146942139, 0.02686389721930027), (1.5542962551116943, 0.0544285774230957), (1.5509541034698486, 0.08150894939899445), (1.5640578269958496, 0.10967531055212021), (1.5605146884918213, 0.13690969347953796), (1.5306578874588013, 0.1613301783800125), (1.5640270709991455, 0.19257883727550507), (1.546343445777893, 0.2179379016160965), (1.558099627494812, 0.24747781455516815), (1.5683228969573975, 0.2773240804672241), (1.5658466815948486, 0.30523911118507385), (1.5521546602249146, 0.3308674693107605), (1.5608309507369995, 0.361385703086853), (1.5692960023880005, 0.3924044668674469), (1.558863639831543, 0.4189152419567108), (1.564570665359497, 0.449951171875), (1.5857120752334595, 0.4862346351146698), (1.6066184043884277, 0.5235772132873535), (1.6051586866378784, 0.5543599128723145), (1.588992714881897, 0.5800968408584595), (1.5794756412506104, 0.6081553101539612), (1.5967621803283691, 0.6471218466758728), (1.5944013595581055, 0.6788888573646545), (1.5922049283981323, 0.7111231088638306), (1.5795155763626099, 0.738879382610321), (1.5663425922393799, 0.7664093971252441), (1.5526896715164185, 0.793704628944397), (1.538561224937439, 0.820756733417511), (1.5239615440368652, 0.8475574254989624), (1.5088950395584106, 0.874098539352417), (1.4933663606643677, 0.9003718495368958), (2.374190092086792, 1.375361442565918), (2.3978967666625977, 1.3336000442504883), (2.4208688735961914, 1.291430115699768), (2.4430994987487793, 1.2488646507263184), (2.4645817279815674, 1.2059166431427002), (2.485308885574341, 1.1625992059707642), (2.505275011062622, 1.11892569065094), (2.5144686698913574, 1.070649266242981), (2.5235447883605957, 1.0227200984954834), (2.5126895904541016, 0.967476487159729), (2.5283522605895996, 0.9230307340621948), (2.5503759384155273, 0.8808015584945679), (2.557404041290283, 0.8334265351295471), (2.5417747497558594, 0.7793968319892883), (2.5256175994873047, 0.7263363599777222), (2.5246005058288574, 0.6784387826919556), (2.539426803588867, 0.6349868774414062), (2.5350584983825684, 0.5869526863098145), (2.5301806926727295, 0.5393499135971069), (2.5473716259002686, 0.49657317996025085), (2.5530459880828857, 0.4514511525630951), (2.5457193851470947, 0.4043445587158203), (2.536557197570801, 0.3574962317943573), (2.5565316677093506, 0.31478604674339294), (2.52514910697937, 0.2661488354206085), (2.5566883087158203, 0.22430765628814697), (2.56160831451416, 0.17962582409381866), (2.5495760440826416, 0.1339906007051468), (2.5536837577819824, 0.08942527323961258), (2.5346014499664307, 0.04436492547392845), (2.553093194961548, 0.0), (2.5527021884918213, -0.04468175768852234), (2.5515291690826416, -0.08934982866048813)), ((0.34014248847961426, 0.3075259327888489), (0.3347083628177643, 0.31343168020248413), (0.3235342502593994, 0.3249533772468567), (0.3177976906299591, 0.33056578040122986), (0.3119637966156006, 0.336076945066452), (0.30603429675102234, 0.3414851725101471), (0.2838118076324463, 0.3280636966228485), (0.2888379991054535, 0.34592846035957336), (0.26000452041625977, 0.3227120637893677), (0.25031450390815735, 0.3220633566379547), (0.23848110437393188, 0.3181780278682709), (0.22409021854400635, 0.3101431727409363), (0.22069291770458221, 0.3169832229614258), (0.20941117405891418, 0.31229597330093384), (0.19003130495548248, 0.29440590739250183), (0.18265259265899658, 0.29414814710617065), (0.17761655151844025, 0.29753395915031433), (0.1625588983297348, 0.283467173576355), (0.1590188443660736, 0.2888953685760498), (0.147453173995018, 0.279347687959671), (0.13759717345237732, 0.27210733294487), (0.1263367086648941, 0.26108789443969727), (0.12531399726867676, 0.2709696590900421), (0.11577342450618744, 0.2622937858104706), (0.10691560059785843, 0.2541767656803131), (0.09681814163923264, 0.24193362891674042), (0.0923258364200592, 0.24295052886009216), (0.09002159535884857, 0.24997669458389282), (0.08416222780942917, 0.24719417095184326), (0.07740158587694168, 0.24108657240867615), (0.07510480284690857, 0.2488124519586563), (0.0665363296866417, 0.23523132503032684), (0.0611492358148098, 0.23158739507198334), (0.056027285754680634, 0.22830447554588318), (0.05566336587071419, 0.24529141187667847), (0.04926742613315582, 0.23618671298027039), (0.04549576714634895, 0.23895291984081268), (0.038809534162282944, 0.2252199500799179), (0.0354960672557354, 0.22997261583805084), (0.029600176960229874, 0.2168881595134735), (0.027122773230075836, 0.22851884365081787), (0.023278733715415, 0.23053739964962006), (0.020015297457575798, 0.24020767211914062), (0.014070538803935051, 0.21408067643642426), (0.010356564074754715, 0.21501688659191132), (0.006621659733355045, 0.21613459289073944), (0.0025177765637636185, 0.1918160766363144), (-0.0009974241256713867, 0.22789356112480164), (-0.004656599834561348, 0.21280409395694733), (-0.008924068883061409, 0.22649404406547546), (-0.013104459270834923, 0.23012937605381012), (-0.015947848558425903, 0.21400226652622223), (-0.01955293118953705, 0.21219563484191895), (-0.02483793906867504, 0.22615590691566467), (-0.03096010908484459, 0.24268053472042084), (-0.03144197165966034, 0.21623872220516205), (-0.036202799528837204, 0.22166332602500916), (-0.04360656812787056, 0.24046127498149872), (-0.04710812494158745, 0.2361517697572708), (-0.05229687690734863, 0.24017329514026642), (-0.05222759768366814, 0.22116263210773468), (-0.06363342702388763, 0.2498301863670349), (-0.0681486502289772, 0.24923665821552277), (-0.06250470876693726, 0.2138139009475708), (-0.07625405490398407, 0.24485169351100922), (-0.07981179654598236, 0.24131560325622559), (-0.08723072707653046, 0.24904023110866547), (-0.09653089195489883, 0.26086607575416565), (-0.10373255610466003, 0.26593300700187683), (-0.11180860549211502, 0.2724541425704956), (-0.10974457114934921, 0.2546423375606537), (-0.11537675559520721, 0.2553216218948364), (-0.1354994773864746, 0.2863871157169342), (-0.1404908001422882, 0.2839718759059906), (-0.14543907344341278, 0.2814696431159973), (-0.15034280717372894, 0.2788811922073364), (-0.15520049631595612, 0.2762073278427124), (-0.16001063585281372, 0.2734488546848297), (-0.16477176547050476, 0.2706066370010376), (-0.16948242485523224, 0.2676815092563629), (-0.6848446726799011, 1.1247285604476929), (-0.6650558710098267, 1.136541724205017), (-0.6450633406639099, 1.148006796836853), (-0.6248732209205627, 1.1591203212738037), (-0.6044917702674866, 1.1698787212371826), (-0.5839250683784485, 1.1802787780761719), (-0.5631795525550842, 1.1903172731399536), (-0.5271716117858887, 1.1665982007980347), (-0.5055280923843384, 1.1729861497879028), (-0.49145954847335815, 1.1975839138031006), (-0.46713465452194214, 1.1975654363632202), (-0.4435727894306183, 1.1987156867980957), (-0.41780614852905273, 1.1928198337554932), (-0.3938194811344147, 1.1907360553741455), (-0.37359780073165894, 1.1996221542358398), (-0.3430934548377991, 1.1736420392990112), (-0.33189642429351807, 1.2138283252716064), (-0.3104594945907593, 1.2188899517059326), (-0.2820563018321991, 1.1943937540054321), (-0.26505783200263977, 1.2172775268554688), (-0.24273617565631866, 1.2168298959732056), (-0.2220417708158493, 1.2244129180908203), (-0.19739051163196564, 1.2085870504379272), (-0.17533281445503235, 1.2058322429656982), (-0.15751001238822937, 1.2346408367156982), (-0.13400813937187195, 1.2201789617538452), (-0.1113099753856659, 1.207977056503296), (-0.09026364237070084, 1.2112370729446411), (-0.0699562355875969, 1.2285120487213135), (-0.048294417560100555, 1.2257187366485596), (-0.02653345838189125, 1.2125648260116577), (-0.005374092608690262, 1.2278839349746704), (0.015642639249563217, 1.1917299032211304), (0.0372440330684185, 1.215665578842163), (0.0584670715034008, 1.213858962059021), (0.07965444028377533, 1.2119277715682983), (0.10305250436067581, 1.236754059791565), (0.12374380975961685, 1.225477933883667), (0.14498494565486908, 1.2215487957000732), (0.16482335329055786, 1.2077033519744873), (0.18803881108760834, 1.2182694673538208), (0.20862512290477753, 1.2106958627700806), (0.23253218829631805, 1.2213058471679688), (0.2534673810005188, 1.2151159048080444), (0.27696433663368225, 1.2204970121383667), (0.2943614423274994, 1.1994876861572266), (0.31644362211227417, 1.1984508037567139), (0.3387127220630646, 1.1974786520004272), (0.3640798032283783, 1.2061491012573242), (0.3830867111682892, 1.1932191848754883), (0.4064638316631317, 1.193831205368042), (0.4288409650325775, 1.1908280849456787), (0.4475591778755188, 1.1777281761169434), (0.4683566689491272, 1.1703511476516724), (0.49464547634124756, 1.1759498119354248), (0.5195758938789368, 1.1771399974822998), (0.5450653433799744, 1.178608775138855), (0.5619084239006042, 1.161241888999939), (0.5888558030128479, 1.1645005941390991), (0.6142604947090149, 1.1637067794799805), (0.6412318348884583, 1.1649494171142578), (0.6600298881530762, 1.1509478092193604), (0.6901931762695312, 1.1561754941940308), (0.7101777791976929, 1.1436874866485596), (0.7323435544967651, 1.1345829963684082), (0.7663443088531494, 1.1428532600402832), (0.7920763492584229, 1.1376664638519287), (0.8097489476203918, 1.1207009553909302), (0.8382357358932495, 1.1183619499206543), (0.863981306552887, 1.1116284132003784), (0.8873955607414246, 1.1014164686203003), (0.9297611117362976, 1.113533616065979), (0.9380705952644348, 1.084334373474121), (0.9734284281730652, 1.086189866065979), (0.9922887682914734, 1.068987488746643), (1.0108451843261719, 1.0514577627182007), (1.0290919542312622, 1.0336058139801025), (1.0470235347747803, 1.015437364578247), (1.0646343231201172, 0.9969578981399536)), ((-0.00329041900113225, -0.75262850522995), (0.009881858713924885, -0.7525708675384521), (0.03621329739689827, -0.7517639994621277), (0.049364395439624786, -0.7510151267051697), (0.06250037252902985, -0.7500361204147339), (0.07561720162630081, -0.7488274574279785), (0.07008210569620132, -0.5904420018196106), (0.06470741331577301, -0.4741109609603882), (0.05447417497634888, -0.3529170751571655), (0.04600505903363228, -0.2669694423675537), (0.03416699543595314, -0.1794472485780716), (0.031360380351543427, -0.15033720433712006), (0.020942918956279755, -0.09228697419166565), (0.014230720698833466, -0.057987280189991), (0.006260855123400688, -0.023710954934358597), (0.004776774439960718, -0.01688740961253643), (0.008584531955420971, -0.02843894436955452), (0.010533377528190613, -0.03280829265713692), (0.003371770493686199, -0.009903122670948505), (0.010866884142160416, -0.030175277963280678), (0.014595668762922287, -0.03840716928243637), (0.004468357656151056, -0.01116558164358139), (0.018634533509612083, -0.044300377368927), (0.016690894961357117, -0.03781403973698616), (0.013844930566847324, -0.02993687056005001), (0.02343938499689102, -0.04843932390213013), (0.028786474838852882, -0.05692644417285919), (0.029728170484304428, -0.056318894028663635), (0.03825048357248306, -0.06949026137590408), (0.03680901229381561, -0.06418614834547043), (0.03480527177453041, -0.058303333818912506), (0.05298662930727005, -0.08533003181219101), (0.05221503973007202, -0.08089327812194824), (0.06319108605384827, -0.09423621743917465), (0.06494405120611191, -0.09327876567840576), (0.059297848492860794, -0.08206800371408463), (0.08105876296758652, -0.10814634710550308), (0.09400393068790436, -0.12094753235578537), (0.07791344821453094, -0.09670355916023254), (0.10243908315896988, -0.12268553674221039), (0.11206657439470291, -0.12953871488571167), (0.10905691981315613, -0.1216888353228569), (0.13110634684562683, -0.14123880863189697), (0.13869792222976685, -0.1442689746618271), (0.14187638461589813, -0.14249733090400696), (0.15448512136936188, -0.14982324838638306), (0.16293594241142273, -0.1525769829750061), (0.1815587282180786, -0.16414731740951538), (0.1950148046016693, -0.1702059656381607), (0.20575517416000366, -0.17333054542541504), (0.23813670873641968, -0.19358636438846588), (0.2516475021839142, -0.19735659658908844), (0.26788821816444397, -0.20262297987937927), (0.2827092409133911, -0.20615535974502563), (0.30763906240463257, -0.21619026362895966), (0.33364319801330566, -0.22584636509418488), (0.35780709981918335, -0.23317740857601166), (0.36439234018325806, -0.2284843921661377), (0.4026714563369751, -0.24277372658252716), (0.43614524602890015, -0.25265488028526306), (0.46168234944343567, -0.25676360726356506), (0.5009801387786865, -0.2672484219074249), (0.5494303703308105, -0.280854731798172), (0.5640774965286255, -0.2759990096092224), (0.6107740998268127, -0.28570958971977234), (0.6648662686347961, -0.2969439923763275), (0.6699612736701965, -0.28526267409324646), (0.6748510599136353, -0.2734939754009247), (0.6795341372489929, -0.2616415023803711), (0.6840090751647949, -0.2497088760137558), (0.6882744431495667, -0.23769976198673248), (0.6923290491104126, -0.22561785578727722), (0.6961715817451477, -0.2134668231010437), (1.6431162357330322, -0.5354626774787903), (1.633493423461914, -0.5641368627548218), (1.6233702898025513, -0.5926382541656494), (1.6127498149871826, -0.620958149433136), (1.601635456085205, -0.6490878462791443), (1.5900304317474365, -0.6770187020301819), (1.577938437461853, -0.7047421932220459), (1.5165694952011108, -0.7094250321388245), (1.4623186588287354, -0.7155019044876099), (1.4398422241210938, -0.7360104322433472), (1.3832899332046509, -0.7379175424575806), (1.3356198072433472, -0.7428019642829895), (1.3014427423477173, -0.7539136409759521), (1.2590638399124146, -0.7590993046760559), (1.211617350578308, -0.759718656539917), (1.1956051588058472, -0.7791575789451599), (1.1617577075958252, -0.7864052653312683), (1.1258164644241333, -0.7911561727523804), (1.0906988382339478, -0.7953521609306335), (1.065442442893982, -0.8058701753616333), (1.0385221242904663, -0.8144693970680237), (1.0140907764434814, -0.8243758082389832), (0.9705508947372437, -0.817603349685669), (0.9484179615974426, -0.8277648091316223), (0.9233385324478149, -0.834790825843811), (0.8928652405738831, -0.8360996842384338), (0.8723402619361877, -0.8460157513618469), (0.8474375009536743, -0.851146399974823), (0.831748902797699, -0.8651575446128845), (0.8114348649978638, -0.8741461038589478), (0.7764546275138855, -0.8663903474807739), (0.7663289904594421, -0.8858063220977783), (0.7433658242225647, -0.8902875781059265), (0.7053082585334778, -0.8754048943519592), (0.7076745629310608, -0.9105096459388733), (0.6808172464370728, -0.9083274006843567), (0.6449604630470276, -0.8926229476928711), (0.6363314390182495, -0.913959264755249), (0.6201282143592834, -0.9247908592224121), (0.5945312976837158, -0.9210677146911621), (0.5805159211158752, -0.9348668456077576), (0.5473859906196594, -0.9169423580169678), (0.5342841744422913, -0.9316643476486206), (0.5204676985740662, -0.9455419182777405), (0.4965397119522095, -0.9406757354736328), (0.48004937171936035, -0.9493175148963928), (0.459015429019928, -0.9485912919044495), (0.43360066413879395, -0.9375739693641663), (0.42049774527549744, -0.9526582956314087), (0.40636885166168213, -0.9660715460777283), (0.37601134181022644, -0.9395813345909119), (0.36983349919319153, -0.9731830954551697), (0.3496907651424408, -0.9710251092910767), (0.32567793130874634, -0.9565386176109314), (0.3162230849266052, -0.984939455986023), (0.29756414890289307, -0.9857742190361023), (0.27695778012275696, -0.9791334867477417), (0.2615598738193512, -0.9905731081962585), (0.2525695562362671, -1.0291693210601807), (0.2422485649585724, -1.0674915313720703), (0.23556505143642426, -1.1292654275894165), (0.2212081402540207, -1.1617993116378784), (0.2158253937959671, -1.2524445056915283), (0.20702166855335236, -1.3412132263183594), (0.19993534684181213, -1.4649255275726318), (0.1879490613937378, -1.583471417427063), (0.17608706653118134, -1.7437676191329956), (0.14554236829280853, -1.7465821504592896), (0.11495309323072433, -1.7488617897033691), (0.08432860672473907, -1.750605821609497), (0.05367828905582428, -1.751813530921936), (0.023011527955532074, -1.752484679222107)), ((2.4858555793762207, -0.9571306109428406), (2.502225399017334, -0.9134790301322937), (2.5326614379882812, -0.8253498077392578), (2.546718120574951, -0.7808992266654968), (2.5599944591522217, -0.7362094521522522), (2.5724868774414062, -0.6912941336631775), (2.5577828884124756, -0.639563798904419), (2.571470022201538, -0.5953701138496399), (2.5714240074157715, -0.5481286644935608), (2.5772387981414795, -0.5023825168609619), (2.5488367080688477, -0.45069420337677), (2.5405640602111816, -0.40351319313049316), (2.5714612007141113, -0.36240291595458984), (2.5631086826324463, -0.31558334827423096), (2.5504422187805176, -0.268802285194397), (2.564870595932007, -0.2250131070613861), (2.5626490116119385, -0.17968642711639404), (2.551128387451172, -0.13405989110469818), (2.553083896636963, -0.08939198404550552), (2.554257392883301, -0.04469669610261917), (2.5546483993530273, 1.2280818737053778e-05), (2.5542569160461426, 0.04472125321626663), (3.5546483993530273, 1.7088063032133505e-05), (3.5541043281555176, -0.06219291687011719), (3.55247163772583, -0.12438387423753738), (3.549750566482544, -0.1865367293357849), (3.560199737548828, -0.24963214993476868), (3.561044454574585, -0.3124063014984131), (3.544934034347534, -0.37361615896224976), (3.5556139945983887, -0.437785804271698), (3.561675786972046, -0.5019564628601074), (3.528184652328491, -0.5603751540184021), (3.5335607528686523, -0.6248165369033813), (3.558764696121216, -0.6937118768692017), (3.5494511127471924, -0.7566064596176147), (3.545698642730713, -0.8209324479103088), (3.5279147624969482, -0.8821415305137634), (3.538224935531616, -0.9508130550384521), (3.521042823791504, -1.0125900506973267), (3.502782106399536, -1.07405686378479), (3.4834485054016113, -1.1351946592330933), (3.463047981262207, -1.1959847211837769), (3.44158673286438, -1.256408452987671)), ((1.539312481880188, -0.13504208624362946), (1.5414401292800903, -0.10808185487985611), (1.5442783832550049, -0.05407033488154411), (1.5569915771484375, -0.027245642617344856), (1.5593249797821045, 7.496055786759825e-06), (1.5590860843658447, 0.027297286316752434), (1.558369517326355, 0.054578714072704315), (1.557175636291504, 0.08184342831373215), (1.5555047988891602, 0.10908306390047073), (2.5557973384857178, 0.1343298703432083), (2.5577566623687744, 0.08958021551370621), (2.5589327812194824, 0.04480312019586563), (2.5593249797821045, 1.2303299627092201e-05), (2.5568385124206543, -0.04474186524748802), (2.543665885925293, -0.08906222879886627), (2.541717767715454, -0.13356536626815796), (2.5389909744262695, -0.17802758514881134))]



    # Set Initial parameters
    rrt = RRT(start=[2.5, -2], goal=[4.75, 10],
              randArea=[-5, 15], obstacleList=obstacleList, obstacleList2=obstacleList2)
    path = rrt.Planning(animation=show_animation)
    path_in=list(reversed(path[:]))
    final_path_r=final_path(path_in,obstacleList,obstacleList2)
    print("this is final path ->")
    print(final_path_r)
# Draw final path
    if show_animation:
        rrt.DrawGraph()
        plt.plot([x for (x, y) in path], [y for (x, y) in path], '-r')
        plt.plot([x for (x, y) in final_path_r], [y for (x, y) in final_path_r], '-m')
        plt.grid(True)
        for i in (path_in):
            plt.plot(i[0], i[1], marker='x', markersize=3, color="blue")
        for i in (final_path_r):
            plt.plot(i[0], i[1], marker='o', markersize=7, color="yellow")
        plt.show()
if __name__ == '__main__':
	main()
